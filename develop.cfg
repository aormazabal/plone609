[buildout]
projectname = w6club
email-support = csm.entorno.web@ibermatica.com

eggs-directory = ~/.buildout/eggs
download-cache = ~/.buildout/downloads

# Don't download new things unless needed to satisfy dependencies.
# Override this on the command line with the "-n" flag.
newest = false

# pick final releases over newer development releases
prefer-final = true

# show picked versions wherever we do an automatic choice
show-picked-versions = true

versions = versions

extends =
    https://dist.plone.org/release/6.0.6/versions.cfg
    https://raw.githubusercontent.com/starzel/buildout/master/linkto/hotfixes/6.0.6.cfg
    oracle.cfg
    varnish-development.cfg
    instance-versions.cfg
    instance-develop.cfg

# makes sure you're not running buildout as root.
extensions =
    mr.developer

# Tell mr.developer to ask before updating a checkout.
always-checkout = force
sources = sources
auto-checkout = *

# Add additional egg download sources here. dist.plone.org contains archives
# of Plone packages.
find-links =
    https://dist.plone.org
    https://dist.plone.org/release/6.0.6
    https://srvbuildout:AP4zJxdgPS1BbSaGoNFLHvgzwMiiCDg6utZGAP@jfrog-io.infra.ocp.once.org/artifactory/api/pypi/plone-python-local/simple

eggs =
    Plone
    Pillow
    plone.recipe.zope2instance
    ${develop:eggs}

zcml =
#    plone.reload

test-eggs +=
#    ploneconf.site [test]
#    collective.repdoc [test]
#    once.zonacreativ [test]

develop =
#    src/my.package


var-dir = ${buildout:directory}/var
var-dir-local = /soft/scweb/zope/w6club
backups-dir = ${buildout:var-dir}
user = admin:admin
deprecation-warnings = off
verbose-security = off

parts =
    instance
    zopepy
    omelette
    test
    zopepy
    repozo
    backup
    ${varnish:parts}
    ${oracle:parts}
    ${develop:parts}
    supervisor
    i18ndude

############################################
# Environment Variables
# ---------------------
# Some of the behavior of your Zope/Plone instances are controlled with OS
# environment variables. You may set those here in a key / value format.
# Some common settings:
#    * TZ allows you to set a time zone for systems where it's not
#      automatically available.
#    * zope_i18n_compile_mo_files allows for automatic compilation of
#      missing translation files (may slow startup).
#    * zope_i18n_allowed_languages allows you to limit the available
#      translations.
#    * PYTHON_EGG_CACHE determines where zipped python packages are unpacked
#      for use.
#    * PYTHONHASHSEED determines initial seed for hashes. "random" causes a
#      pseudo-random value is used to seed the hashes of str, bytes and datetime
#      objects.
environment-vars =
    zope_i18n_compile_mo_files true
    TZ Europe/Madrid
    PYTHON_EGG_CACHE ${buildout:directory}/var/.python-eggs
    DIAZO_ALWAYS_CACHE_RULES 1
    INSTALLATION_PATH ${buildout:directory}
    SHARED_PUBLIC_PATH /nfsdata/zope/weclub/filerepo

[plone-sites]
main = weclub

[ports]
client1 = 10103
client2 = 10203
client3 = 10303
client4 = 10403
# zeo-address = ${buildout:projectname}-zeo:10905
zeo-address = 10903
haproxy = 10059
varnish = 10030
varnish_telnet = 10031


[instance]
recipe = plone.recipe.zope2instance
user = ${buildout:user}
http-address = 8080
debug-mode = on
verbose-security = on
deprecation-warnings = on
eggs = ${buildout:eggs}
zcml = ${buildout:zcml}
file-storage = ${buildout:directory}/var/filestorage/Data.fs
blob-storage = ${buildout:directory}/var/blobstorage
http-fast-listen = true
zodb-temporary-storage = off
zcml-additional =
    <configure xmlns="http://namespaces.zope.org/zope"
               xmlns:plone="http://namespaces.plone.org/plone">
        <plone:CORSPolicy
            allow_origin="http://localhost:3000,http://127.0.0.1:3000"
            allow_methods="DELETE,GET,OPTIONS,PATCH,POST,PUT"
            allow_credentials="true"
            expose_headers="Content-Length,X-My-Header"
            allow_headers="Accept,Authorization,Content-Type,X-Custom-Header,Origin,Lock-Token"
            max_age="3600"
        />
    </configure>

    <configure xmlns="http://namespaces.zope.org/zope"
             xmlns:db="http://namespaces.zope.org/db">
        <include package="z3c.saconfig" file="meta.zcml" />
        <db:engine xmlns="http://namespaces.zope.org/db"
                name="clubon"
                url="oracle://clubon_d:clubond@DWEB"
                pool_size="5"
                max_overflow="5"
                pool_recycle="60"
                pool_timeout="5" />
        <db:session engine="clubon" />
    </configure>

environment-vars =${buildout:environment-vars}
threads = 6

[repozo]
# This recipe builds the repozo script for non-zeo installations.
recipe = zc.recipe.egg
eggs = ZODB
scripts = repozo

[backup]
# This recipe builds the backup, restore and snapshotbackup commands.
# For options see http://pypi.python.org/pypi/collective.recipe.backup
recipe = collective.recipe.backup
location = ${buildout:backups-dir}/incrementalbackup/backups
blobbackuplocation = ${buildout:backups-dir}/incrementalbackup/blobstoragebackups
snapshotlocation = ${buildout:backups-dir}/snapshotbackup/snapshotbackups
blobsnapshotlocation = ${buildout:backups-dir}/snapshotbackup/blobstoragesnapshots
# datafs = ${buildout:var-dir}/filestorage/Data.fs
# blob-storage = ${buildout:var-dir}/blobstorage
blob_timestamps = true


[test]
recipe = zc.recipe.testrunner
eggs = ${buildout:test-eggs}
defaults = ['--auto-color', '-vvv']



[omelette]
recipe = collective.recipe.omelette
eggs = ${buildout:eggs}

[zopepy]
# installs a zopepy python interpreter that runs with your
# full Zope environment
recipe = zc.recipe.egg
eggs = ${buildout:eggs}
interpreter = zopepy
scripts = zopepy

[vscode]
recipe = collective.recipe.vscode
eggs = ${instance:eggs}
autocomplete-use-omelette = False

[i18ndude]
unzip = true
recipe = zc.recipe.egg
eggs = i18ndude

[supervisor]
recipe = collective.recipe.supervisor
http-socket = unix
file = ${buildout:directory}/var/supervisord.sock
plugins = superlance
programs =
#  Prio Name      Program                                      Params
#    10 zeo${buildout:projectname} (autorestart=true) ${buildout:directory}/bin/zeo [fg] true
   20 zope-${buildout:projectname}-${instance:http-address} (autorestart=true) ${buildout:directory}/bin/instance [console] true
#    30 haproxy-${buildout:projectname}-${ports:haproxy} ${buildout:directory}/bin/haproxy [ -f ${buildout:directory}/etc/haproxy.conf -db ]
   40 varnish-${buildout:projectname}-${ports:varnish} (autorestart=true) ${buildout:directory}/bin/varnish-script true

#  Enable if needed
#   21 zope${buildout:projectname}${client1:http-address} (autorestart=true) ${buildout:directory}/bin/client1 [console] true
#   22 zope${buildout:projectname}${client2:http-address} (autorestart=true) ${buildout:directory}/bin/client2 [console] true
#   23 zope${buildout:projectname}${client3:http-address} (autorestart=true) ${buildout:directory}/bin/client3 [console] true
#   24 zope${buildout:projectname}${client4:http-address} (autorestart=true) ${buildout:directory}/bin/client4 [console] true

eventlisteners =
#  Check every 60 seconds that no child process has exceeded.
#   Memmon${buildout:projectname}${instance:http-address} TICK_60 ${buildout:bin-directory}/memmon [-p zope${buildout:projectname}${instance:http-address}=700MB -m ${buildout:email-support}]
# Check every 60 seconds whether the plone instance is alive
   InstanceHttpAlive TICK_60 ${buildout:bin-directory}/httpok [-p instance -t 20 http://127.0.0.1:${instance:http-address}/${plone-sites:main}]
   MailMe${buildout:projectname}${instance:http-address} PROCESS_STATE_EXITED ${buildout:bin-directory}/crashmail [-p zope${buildout:projectname}${instance:http-address} -m ${buildout:email-support}]
#  Enable if needed
#   Memmon${buildout:projectname}${client1:http-address} TICK_60 ${buildout:bin-directory}/memmon [-p zope${buildout:projectname}${client1:http-address}=700MB -m ${buildout:email-support}]
#   Memmon${buildout:projectname}${client2:http-address} TICK_60 ${buildout:bin-directory}/memmon [-p zope${buildout:projectname}${client2:http-address}=700MB -m ${buildout:email-support}]
#   Memmon${buildout:projectname}${client3:http-address} TICK_60 ${buildout:bin-directory}/memmon [-p zope${buildout:projectname}${client3:http-address}=700MB -m ${buildout:email-support}]
#   Memmon${buildout:projectname}${client4:http-address} TICK_60 ${buildout:bin-directory}/memmon [-p zope${buildout:projectname}${client4:http-address}=700MB -m ${buildout:email-support}]
#   HttpAlive${buildout:projectname}${client1:http-address} TICK_60 ${buildout:bin-directory}/memmon [-p zope${buildout:projectname}${client1:http-address}=700MB -m ${buildout:email-support}]
#   HttpAlive${buildout:projectname}${client2:http-address} TICK_60 ${buildout:bin-directory}/memmon [-p zope${buildout:projectname}${client2:http-address}=700MB -m ${buildout:email-support}]
#   HttpAlive${buildout:projectname}${client3:http-address} TICK_60 ${buildout:bin-directory}/memmon [-p zope${buildout:projectname}${client3:http-address}=700MB -m ${buildout:email-support}]
#   HttpAlive${buildout:projectname}${client4:http-address} TICK_60 ${buildout:bin-directory}/memmon [-p zope${buildout:projectname}${client4:http-address}=700MB -m ${buildout:email-support}]
#   MailMe${buildout:projectname}${client1:http-address} PROCESS_STATE_EXITED ${buildout:bin-directory}/crashmail [-p zope${buildout:projectname}${client1:http-address} -m ${buildout:email-support}]
#   MailMe${buildout:projectname}${client2:http-address} PROCESS_STATE_EXITED ${buildout:bin-directory}/crashmail [-p zope${buildout:projectname}${client2:http-address} -m ${buildout:email-support}]
#   MailMe${buildout:projectname}${client3:http-address} PROCESS_STATE_EXITED ${buildout:bin-directory}/crashmail [-p zope${buildout:projectname}${client3:http-address} -m ${buildout:email-support}]
#   MailMe${buildout:projectname}${client4:http-address} PROCESS_STATE_EXITED ${buildout:bin-directory}/crashmail [-p zope${buildout:projectname}${client4:http-address} -m ${buildout:email-support}]

